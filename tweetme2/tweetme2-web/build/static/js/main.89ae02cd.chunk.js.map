{"version":3,"sources":["logo.svg","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","classname","onSubmit","event","preventDefault","newValue","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89ae02cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect,useState} from 'react' \r\n\r\nexport function TweetComponent(props){\r\n  const textAreaRef = React.createRef()\r\n  const [newTweets , setNewTweets] =useState([])\r\n  const handleSubmit =(event)=>{\r\n    event.preventDefault()\r\n   \r\n    const newValue = textAreaRef.current.value\r\n    let tempNewTweets = [...newTweets] //copy the newTweets\r\n    //change this to a server side call\r\n    \r\n    tempNewTweets.unshift({    //unshift put it to the very begining whereas push sends it to the last\r\n      content:newValue,\r\n      likes:0,\r\n      id:12313\r\n    })\r\n    setNewTweets(tempNewTweets)\r\n    textAreaRef.current.value=''\r\n  }\r\n  return <div className={props.classname}>\r\n    <div className='col-12 mb-3'>\r\n    <form onSubmit={handleSubmit}> \r\n    <textarea ref={textAreaRef} required={true} className='form-control'>\r\n\r\n\r\n    </textarea>\r\n    <button type=\"submit\" className='btn btn-primary my-3'>Tweet</button>\r\n  </form>\r\n  </div>\r\n  <TweetsList newTweets={newTweets}/>\r\n  </div>\r\n}\r\n \r\n  \r\nexport function TweetsList(props){\r\n    \r\n      const [tweetsInit, setTweetsInit]=useState([])\r\n      const [tweets, setTweets]=useState([])\r\n      //setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n      \r\n      useEffect(()=>{\r\n        const final=[...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length){\r\n          setTweets(final)\r\n        }\r\n        \r\n      },[props.newTweets,tweets, tweetsInit])\r\n\r\n      useEffect(()=>{\r\n        const myCallback = (response,status)=>{\r\n          if(status === 200){\r\n            \r\n            setTweetsInit(response)\r\n          }else{\r\n            alert(\"Their was an error\")\r\n          }\r\n        \r\n        \r\n        }\r\n        loadTweets(myCallback)\r\n       \r\n      },[tweetsInit])\r\n      return tweets.map((item, index)=>{\r\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n      })\r\n  }\r\n\r\nfunction loadTweets(callback){\r\n        \r\n    const xhr=new XMLHttpRequest()\r\n    const method ='GET'  //\"POST\"\r\n    const url=\"http://localhost:8000/api/tweets/\"\r\n    const responseType=\"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method,url)\r\n   \r\n  \r\n    xhr.onload =function(){\r\n      callback(xhr.response, xhr.status)\r\n   \r\n  \r\n    //console.log(listedItems)\r\n  }\r\n  xhr.onerror = function(e){\r\n    console.log(e)\r\n    callback({\"message\":\"The request was an error\"},400)\r\n  }\r\n  xhr.send()\r\n  \r\n  }\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action}=props\r\n    const [likes,setLikes] = useState(tweet.likes ?tweet.likes :0)\r\n    const [userLike,setUserLike]=useState(tweet.userLike === true ? true : false) \r\n    const className = props.className ? props.className : 'btn btn-outline-success btn-sm'\r\n    const actionDisplay = action.display ? action.display :'Action'\r\n    \r\n    \r\n    const handleClick=(event)=>{\r\n        event.preventDefault()\r\n        if (action.type === 'like'){\r\n            if(userLike === true){\r\n              //unlike\r\n              setLikes(likes - 1)\r\n              setUserLike(false)\r\n            }else{\r\n              setLikes(likes+1)\r\n              setUserLike(true)\r\n\r\n            }\r\n            \r\n            \r\n        }\r\n    }\r\n    const display=action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Tweet(props){\r\n    const{tweet}= props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n      <p>{tweet.id}-{tweet.content}</p>\r\n      <div className='btn btn-group'> \r\n        <ActionBtn tweet={tweet} action={{type:\"like\" , display:\"Likes\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"UnLike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/> \r\n      </div>\r\n    </div>\r\n  }","import React  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponent} from './tweets'\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl=document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,appEl);\n}\n\nconst tweetEl=document.getElementById('tweetme-2')\nif(tweetEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetComponent />\n    </React.StrictMode>,tweetEl);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}